#include <iostream>
#include <vector>
#include <map>
#include <string>
#include "column_3.h"

#define BITMAP_HEIGHT 7
#define BITMAP_WIDTH 6

using namespace std;

// 3.
static map<char, vector<vector<bool>>> bitmap =
{
{ 'A',
{ { 0,1,1,1,1,0 }
,{ 1,1,0,0,1,1 }
,{ 1,1,0,0,1,1 }
,{ 1,1,1,1,1,1 }
,{ 1,1,0,0,1,1 }
,{ 1,1,0,0,1,1 }
,{ 1,1,0,0,1,1 }
} },

{ 'B',
{ { 1,1,1,1,1,0 }
,{ 1,1,0,0,1,1 }
,{ 1,1,0,0,1,1 }
,{ 1,1,1,1,1,0 }
,{ 1,1,0,0,1,1 }
,{ 1,1,0,0,1,1 }
,{ 1,1,1,1,1,0 }
} },

{ 'C',
{ { 0,1,1,1,1,0 }
,{ 1,1,0,0,1,1 }
,{ 1,1,0,0,0,0 }
,{ 1,1,0,0,0,0 }
,{ 1,1,0,0,0,0 }
,{ 1,1,0,0,1,1 }
,{ 0,1,1,1,1,0 }
} },

{ 'D',
{ { 1,1,1,1,1,0 }
,{ 1,1,0,0,1,1 }
,{ 1,1,0,0,1,1 }
,{ 1,1,0,0,1,1 }
,{ 1,1,0,0,1,1 }
,{ 1,1,0,0,1,1 }
,{ 1,1,1,1,1,0 }
} },

{ 'E',
{ { 0,1,1,1,1,1 }
,{ 1,1,0,0,0,0 }
,{ 1,1,0,0,0,0 }
,{ 1,1,1,1,1,0 }
,{ 1,1,0,0,0,0 }
,{ 1,1,0,0,0,0 }
,{ 0,1,1,1,1,1 }
} },

{ 'F',
{ { 1,1,1,1,1,1 }
,{ 1,1,0,0,0,0 }
,{ 1,1,0,0,0,0 }
,{ 1,1,1,1,1,0 }
,{ 1,1,0,0,0,0 }
,{ 1,1,0,0,0,0 }
,{ 1,1,0,0,0,0 }
} },

{ 'G',
{ { 0,1,1,1,1,0 }
,{ 1,1,0,0,1,1 }
,{ 1,1,0,0,0,0 }
,{ 1,1,0,1,1,1 }
,{ 1,1,0,0,1,1 }
,{ 1,1,0,0,1,1 }
,{ 0,1,1,1,1,0 }
} },

{ 'H',
{ { 1,1,0,0,1,1 }
,{ 1,1,0,0,1,1 }
,{ 1,1,0,0,1,1 }
,{ 1,1,1,1,1,1 }
,{ 1,1,0,0,1,1 }
,{ 1,1,0,0,1,1 }
,{ 1,1,0,0,1,1 }
} },

{ 'I',
{ { 0,1,1,1,1,0 }
,{ 0,0,1,1,0,0 }
,{ 0,0,1,1,0,0 }
,{ 0,0,1,1,0,0 }
,{ 0,0,1,1,0,0 }
,{ 0,0,1,1,0,0 }
,{ 0,1,1,1,1,0 }
} },

{ 'J',
{ { 0,0,0,1,1,0 }
,{ 0,0,0,1,1,0 }
,{ 0,0,0,1,1,0 }
,{ 0,0,0,1,1,0 }
,{ 0,0,0,1,1,0 }
,{ 1,1,0,1,1,0 }
,{ 0,1,1,1,0,0 }
} },

{ 'K',
{ { 1,1,0,0,1,1 }
,{ 1,1,0,1,1,0 }
,{ 1,1,1,1,0,0 }
,{ 1,1,1,0,0,0 }
,{ 1,1,1,1,0,0 }
,{ 1,1,0,1,1,0 }
,{ 1,1,0,0,1,1 }
} },

{ 'L',
{ { 1,1,0,0,0,0 }
,{ 1,1,0,0,0,0 }
,{ 1,1,0,0,0,0 }
,{ 1,1,0,0,0,0 }
,{ 1,1,0,0,0,0 }
,{ 1,1,0,0,0,0 }
,{ 1,1,1,1,1,1 }
} },

{ 'M',
{ { 1,1,0,0,1,1 }
,{ 1,1,1,1,1,1 }
,{ 1,1,1,1,1,1 }
,{ 1,1,0,0,1,1 }
,{ 1,1,0,0,1,1 }
,{ 1,1,0,0,1,1 }
,{ 1,1,0,0,1,1 }
} },

{ 'N',
{ { 1,1,0,0,1,1 }
,{ 1,1,0,0,1,1 }
,{ 1,1,1,0,1,1 }
,{ 1,1,0,1,1,1 }
,{ 1,1,0,0,1,1 }
,{ 1,1,0,0,1,1 }
,{ 1,1,0,0,1,1 }
} },

{ 'O',
{ { 0,1,1,1,1,0 }
,{ 1,1,0,0,1,1 }
,{ 1,1,0,0,1,1 }
,{ 1,1,0,0,1,1 }
,{ 1,1,0,0,1,1 }
,{ 1,1,0,0,1,1 }
,{ 0,1,1,1,1,0 }
} },

{ 'P',
{ { 1,1,1,1,1,0 }
,{ 1,1,0,0,1,1 }
,{ 1,1,0,0,1,1 }
,{ 1,1,1,1,1,0 }
,{ 1,1,0,0,0,0 }
,{ 1,1,0,0,0,0 }
,{ 1,1,0,0,0,0 }
} },

{ 'Q',
{ { 0,1,1,1,1,0 }
,{ 1,1,0,0,1,1 }
,{ 1,1,0,0,1,1 }
,{ 1,1,0,0,1,1 }
,{ 1,1,0,1,1,1 }
,{ 0,1,1,1,1,0 }
,{ 0,0,0,0,1,1 }
} },

{ 'R',
{ { 1,1,1,1,1,0 }
,{ 1,1,0,0,1,1 }
,{ 1,1,0,0,1,1 }
,{ 1,1,1,1,1,0 }
,{ 1,1,1,1,0,0 }
,{ 1,1,0,1,1,0 }
,{ 1,1,0,0,1,1 }
} },

{ 'S',
{ { 0,1,1,1,1,0 }
,{ 1,1,0,0,1,1 }
,{ 1,1,0,0,0,0 }
,{ 0,1,1,1,1,0 }
,{ 0,0,0,0,1,1 }
,{ 1,1,0,0,1,1 }
,{ 0,1,1,1,1,0 }
} },

{ 'T',
{ { 1,1,1,1,1,1 }
,{ 0,0,1,1,0,0 }
,{ 0,0,1,1,0,0 }
,{ 0,0,1,1,0,0 }
,{ 0,0,1,1,0,0 }
,{ 0,0,1,1,0,0 }
,{ 0,0,1,1,0,0 }
} },

{ 'U',
{ { 1,1,0,0,1,1 }
,{ 1,1,0,0,1,1 }
,{ 1,1,0,0,1,1 }
,{ 1,1,0,0,1,1 }
,{ 1,1,0,0,1,1 }
,{ 1,1,0,0,1,1 }
,{ 0,1,1,1,1,0 }
} },

{ 'V',
{ { 1,1,0,0,1,1 }
,{ 1,1,0,0,1,1 }
,{ 1,1,0,0,1,1 }
,{ 1,1,0,0,1,1 }
,{ 1,1,0,0,1,1 }
,{ 0,1,1,1,1,0 }
,{ 0,0,1,1,0,0 }
} },

{ 'W',
{ { 1,1,0,0,1,1 }
,{ 1,1,0,0,1,1 }
,{ 1,1,0,0,1,1 }
,{ 1,1,0,0,1,1 }
,{ 1,1,1,1,1,1 }
,{ 1,1,1,1,1,1 }
,{ 1,1,0,0,1,1 }
} },

{ 'X',
{ { 1,1,0,0,1,1 }
,{ 1,1,0,0,1,1 }
,{ 0,1,1,1,1,0 }
,{ 0,0,1,1,0,0 }
,{ 0,1,1,1,1,0 }
,{ 1,1,0,0,1,1 }
,{ 1,1,0,0,1,1 }
} },

{ 'Y',
{ { 1,1,0,0,1,1 }
,{ 1,1,0,0,1,1 }
,{ 1,1,0,0,1,1 }
,{ 0,1,1,1,1,0 }
,{ 0,0,1,1,0,0 }
,{ 0,0,1,1,0,0 }
,{ 0,0,1,1,0,0 }
} },

{ 'Z',
{ { 1,1,1,1,1,1 }
,{ 0,0,0,0,1,1 }
,{ 0,0,0,1,1,0 }
,{ 0,0,1,1,0,0 }
,{ 0,1,1,0,0,0 }
,{ 1,1,0,0,0,0 }
,{ 1,1,1,1,1,1 }
} }
};


void printAlphabet(char c) {
	const vector<vector<bool> > alpha = bitmap[c];
	for (int h = 0; h < BITMAP_HEIGHT; ++h) {
		for (int w = 0; w < BITMAP_WIDTH; ++w) {
			if (alpha[h][w]) cout << "@";
			else cout << " ";
		}
		cout << "\n";
	}
}

// 4.
// 윤년 체크
#define DAY_OF_YEAR 365
// 1900.01.01 monday
static const string week[7] = { "mon", "tue", "wed", "thu", "fri", "sat", "sun" };
static const int month[12] = { 31,28,31,30,31,30,31,31,30,31,30,31 };

static bool isLeapYear(int year) {
	if ((year % 4 == 0) && (year % 100 != 0) || (year % 400 == 0))
		return true;
	return false;
}

// 1900년 1월 1일 부터의 날짜 가져오기
int getDay(const int y, const int m, const int d) {
	int ret = 0;

	for (int i = 1900; i < y; ++i) {
		ret += DAY_OF_YEAR;
		if (isLeapYear(i)) {
			ret++;
		}
	}

	for (int i = 0; i < m - 1; ++i) {
		ret += month[i];
		if ((i == 1) && isLeapYear(y)) {
			ret++;
		}
	}

	return ret + d - 1;
}
// y1m1d1 - y2m2d2
int calcDay(const int y1, const int m1, const int d1, const int y2, const int m2, const int d2) {
	// 2가 크면 바꿔서 다시함.
	if (y1 < y2 || (y1 == y2 && m1 < m2) || (y1 == y2 && m1 == m2 && d1 < d2)) {
		return calcDay(y2, m2, d2, y1, m1, d1);
	}
	// 내림수
	int n = 0;

	return getDay(y1, m1, d1) - getDay(y2, m2, d2);
}

string getDayOfWeek(const int y, const int m, const int d) {
	return week[getDay(y, m, d) % 7];
}

void printCalendar(const int y, const int m) {
	const int day = getDay(y, m, 1);

	int i = day % 7;
	
	// 맨위 달력정보
	cout << y << "/" << m << " calendar\n";
	for (int j = 0; j < 7; ++j) {
		cout << week[j] << " ";
	}
	cout << "\n";

	// 빈칸 넣기
	for (int j = 0; j < i; ++j) {
		cout << "    ";
	}
	// 달력 날짜 채우기

	int curDay = 1;
	while (1) {
		for (; i < 7; ++i) {
			cout << " " << curDay << " ";
			// 레이아웃을 맞추기위해
			if (curDay < 10) {
				cout << " ";
			}
			curDay++;
			if (month[m] < curDay) {
				return;
			}
		}
		cout << "\n";
		i = 0;
	}
}

// 6.
// 폼-레터 생성기. $1(name), $2(age), $3(country) 를 넣은 문장
void printScm(const string name, const string age, const string country, const string outp) {
	const string field[3] = { name, age, country };

	const int size = outp.size();

	for (int i = 0; i < size; ++i) {
		if (outp[i] == '$') {
			i++;
			cout << field[atoi(&outp[i]) - 1];
		}
		else {
			cout << outp[i];
		}
	}
}

// 8.
// 디지털 숫자 표시 장치(seven-segment device)
static map<__int8, __int8> numMap =
{
{0, 125}, // 0111 1101 : 125
{1, 80 }, // 0101 0000 : 80
{2, 55 }, // 0011 0111 : 55
{3, 87 }, // 0101 0111 : 87
{4, 90 }, // 0101 1010 : 90
{5, 79 }, // 0100 1111 : 79
{6, 111}, // 0110 1111 : 111
{7, 84 }, // 0101 0100 : 84
{8, 127}, // 0111 1111 : 127
{9, 94 }};// 0101 1110 : 94

void printDigitArr(const uint16_t n) {
	uint16_t rest = n; // 나머지
	uint8_t quotient = 0; // 몫
	for (uint16_t i = 10000; i >= 1; i /= 10) {
		quotient = static_cast<uint8_t>(rest / i);
		rest = rest % i;
		printf("%d ", numMap[quotient]);
	}
	cout << "\n"; 
}



void testColumn_3() {

	// 3.
	printAlphabet('C');
	cout << "\n\n";

	// 4.
	cout << "1999.01.01 ~ 2000.01.01 차이 ";
	cout << calcDay(1999, 1, 1, 2000, 1, 1) << "\n"; // 365
	cout << "2000.01.01 ~ 2001.01.01 차이 ";
	cout << calcDay(2000, 1, 1, 2001, 1, 1) << "\n"; // 366

	cout << "\n\n";

	cout << "2018.07.10 은 무슨요일?\n";
	cout << getDayOfWeek(2018, 7, 10);

	cout << "\n\n";

	printCalendar(2018, 7);

	cout << "\n\n";

	// 6.
	cout << "$1 : iCa, $2 : 28, $3 : Korea\n";
	cout << "hello, my name is $1. I'm $2 year's old. I'm from $3. Thanks\n\n";
	
	printScm("iCa", "28", "Korea", "hello, my name is $1. I'm $2 year's old. I'm from $3. Thanks\n");

	// 8.
	printDigitArr(65123);
}
